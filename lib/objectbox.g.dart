// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1644221422462110333),
      name: 'User',
      lastPropertyId: const IdUid(10, 6521087806392229244),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1893318165428291917),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1800619964793994314),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7761752331421636357),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6095766447170403064),
            name: 'designation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7782659111418213394),
            name: 'department',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6917096914959744827),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 86488974724760308),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2932595734907404504),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2900146199003182146),
            name: 'phoneNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6521087806392229244),
            name: 'photoPath',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 1644221422462110333),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    User: EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final firstNameOffset = object.firstName == null
              ? null
              : fbb.writeString(object.firstName!);
          final lastNameOffset = object.lastName == null
              ? null
              : fbb.writeString(object.lastName!);
          final designationOffset = object.designation == null
              ? null
              : fbb.writeString(object.designation!);
          final departmentOffset = object.department == null
              ? null
              : fbb.writeString(object.department!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final userNameOffset = object.userName == null
              ? null
              : fbb.writeString(object.userName!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final photoPathOffset = fbb.writeString(object.photoPath);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, firstNameOffset);
          fbb.addOffset(2, lastNameOffset);
          fbb.addOffset(3, designationOffset);
          fbb.addOffset(4, departmentOffset);
          fbb.addOffset(5, emailOffset);
          fbb.addOffset(6, userNameOffset);
          fbb.addOffset(7, passwordOffset);
          fbb.addInt64(8, object.phoneNumber);
          fbb.addOffset(9, photoPathOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// see [User.firstName]
  static final firstName =
      QueryStringProperty<User>(_entities[0].properties[1]);

  /// see [User.lastName]
  static final lastName = QueryStringProperty<User>(_entities[0].properties[2]);

  /// see [User.designation]
  static final designation =
      QueryStringProperty<User>(_entities[0].properties[3]);

  /// see [User.department]
  static final department =
      QueryStringProperty<User>(_entities[0].properties[4]);

  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[0].properties[5]);

  /// see [User.userName]
  static final userName = QueryStringProperty<User>(_entities[0].properties[6]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[0].properties[7]);

  /// see [User.phoneNumber]
  static final phoneNumber =
      QueryIntegerProperty<User>(_entities[0].properties[8]);

  /// see [User.photoPath]
  static final photoPath =
      QueryStringProperty<User>(_entities[0].properties[9]);
}
